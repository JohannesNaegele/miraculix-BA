==84673== Memcheck, a memory error detector
==84673== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==84673== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==84673== Command: /usr/lib64/R/bin/exec/R -f benchmark_paper.R
==84673== 

R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
Tippen Sie 'license()' or 'licence()' für Details dazu.

R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
Tippen Sie 'contributors()' für mehr Information und 'citation()',
um zu erfahren, wie R oder R packages in Publikationen zitiert werden können.

Tippen Sie 'demo()' für einige Demos, 'help()' für on-line Hilfe, oder
'help.start()' für eine HTML Browserschnittstelle zur Hilfe.
Tippen Sie 'q()', um R zu verlassen.

> ## This script benchmarks miraculix against rrblup and base R. CPU and GPU versions are tested. We simulate populations with 50k SNPs and three generations.
> library(rgpu)
==84673== Warning: set address range perms: large range [0x7b874000, 0x90ffe000) (noaccess)
==84673== Warning: set address range perms: large range [0x7ba00000, 0x90f8a000) (defined)
> library(MoBPS)
#############################################################
############ Modular Breeding Program Simulator #############
#############################################################
################ Version: 1.6.64 (03-11-2021) ###############
######## To update to the most recent stable version: #######
## devtools::install_github('tpook92/MoBPS', subdir='pkg') ##
#############################################################
################ Web-interface: www.mobps.de ################
### Extended documentation: www.github.com/tpook92/MoBPS ####
#############################################################
> library(miraculix)
Lade nötiges Paket: RandomFieldsUtils
==84673== Warning: set address range perms: large range [0x90f8a000, 0xa1573000) (noaccess)
==84673== Warning: set address range perms: large range [0x91000000, 0xa13e9000) (defined)
Consider immediate use of one of 
        RFoptions(install.control=list(force=FALSE)) # beginners
        RFoptions(install.control=list(repos=NULL)) # advanced user
        RFoptions(install.control=NULL) # advanced user, alternative

==84673== Warning: noted but unhandled ioctl 0x30000001 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x27 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x25 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x17 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: set address range perms: large range [0x200000000, 0x300200000) (noaccess)
==84673== Warning: set address range perms: large range [0xb87c6000, 0xd87c5000) (noaccess)

Attache Paket: ‘miraculix’

Das folgende Objekt ist maskiert ‘package:RandomFieldsUtils’:

    crossprodx

> RFoptions(install="none")
> # breakpoint set --name miraculix::relationshipMatrix
> 
> # Number of individuals
> n <- c(4*2048) # 
> # Prevent timeouts from R
> setTimeLimit(cpu = 21600, elapsed = 21600, transient = FALSE)
> # Global RFutils options
> RFoptions(cores=6,helpinfo=FALSE)
> # Matrix for time measurements
> comp_time <- matrix(0, nrow=length(n), ncol=4)
> rownames(comp_time) <- n
> colnames(comp_time) <- c("rrBLUP","miraclux_CPU","base_R","miraculix_GPU")
> 
> # RFoptions(la_mode=LA_GPU,snpcoding=MMA1Bit)
> 
> #Iterate over number of individuals
> for(i in 1:length(n)){
+ 
+    #Simulate population
+   population <- creating.diploid(nsnp = 4*2048, nindi = n[i], n.additive = c(100,100))
+ 
+   population <- breeding.diploid(population, heritability = c(0.5,0.5),
+                                  phenotyping.database = cbind(1,1),
+                                  n.observation = c(1,0))
+   population <- breeding.diploid(population, heritability = c(0.5,0.5),
+                                  phenotyping.database = cbind(1,2),
+                                  n.observation = c(1,1))
+ 
+   # Extract relevant information
+   Z <- get.geno(population, gen=1) # Bestimmung der Genotypen
+   pheno <- get.pheno(population, gen=1) # Bestimmung der Phaenotypen
+   genomische_wert <- get.bv(population, gen=1) # Bestimmung tatsaechlicher genomischer Zuchtwerte (diese sind in der Praxis unbekannt)
+  
+   y <- pheno[1,] # Betrachte Trait 1
+   y_real <- genomische_wert[1,]
+   ratio <- 1 # Verhaeltnis zwischen residualer/zufaelliger Effekte und genetischer Varianz
+ 
+   # Start time measurements
+   cat("rrBLUP\n")
+   RFoptions(snpcoding=NoSNPcodingR)
+ 
+   # comp_time[i,1] <-system.time({
+   #   G <- miraculix::relationshipMatrix( miraculix::genomicmatrix(Z), centered = TRUE, normalized = TRUE) # Berechnung Verwandtschaftsmatrix
+   #   rrBLUP::mixed.solve(y-mean(y), K = G, method="REML", bounds = c(1e-9,1e9))
+   # })[3]
+   
+   cat("miraculix useGPU=F\n")
+   RFoptions(snpcoding=Shuffle256, la_mode=LA_INTERN)
+ 
+   # comp_time[i,2] <-system.time({
+   #   G <- miraculix::relationshipMatrix( miraculix::genomicmatrix(Z), centered = TRUE, normalized = TRUE) # Berechnung Verwandtschaftsmatrix
+   #   y_hat <- miraculix::solveRelMat(G, ratio, y - mean(y), mean(y))
+   #   })[3] 
+ 
+   cat("base R\n")
+   RFoptions(snpcoding=NoSNPcodingR)
+ 
+   # comp_time[i,3] <-system.time({
+   #   G <- miraculix::relationshipMatrix( miraculix::genomicmatrix(Z), centered = TRUE, normalized = TRUE) # Berechnung Verwandtschaftsmatrix
+   #  ( G %*% (chol2inv(chol(add.diag(G, ratio))) %*% (y-mean(y)))) + mean(y)
+   # })[3]
+   
+   cat("miraculix useGPU=T\n")
+   # RFoptions(la_mode=LA_GPU,snpcoding=MMAGPU)
+   RFoptions(la_mode=LA_GPU,snpcoding=MMA1Bit)
+ 
+   print(is.numeric(Z) || is.logical(Z))
+   comp_time[i,4] <- system.time({
+     G <- miraculix::relationshipMatrix( miraculix::genomicmatrix(Z), centered = TRUE, normalized = TRUE) # Berechnung Verwandtschaftsmatrix
+     rm(Z); rm(population); gc()
+     y_hat2 <- ifelse(n[i]<30e3, miraculix::solveRelMat(G, ratio, y - mean(y), mean(y)), rgpu::cu_matmul(G, rgpu::solve_large(G + ratio *diag(rep(1,n[i])), matrix(y-mean(y),ncol=1) )) + mean(y)  )
+   })[3] 
+ 
+   # Sanity check results and print intermediary results
+   # print(paste0("Deviation of ",sum(abs(y_hat$yhat-y_hat2$yhat))))
+   print(comp_time)
+ }
Do not forget to run 'RFoptions(storing=FALSE)' after each call of a parallel command (e.g. from packages 'parallel') that calls a function in 'RandomFields'. (OMP within RandomFields is not affected.) This message can be suppressed by 'RFoptions(warn_parallel=FALSE)'.
Both sexes in the cohort. Added _M, _F to cohort names!
Successfully generated cohort: Cohort_1_M
Database position: 1 (gen), 1 (sex), 1 (first), 4096 (last).
Successfully generated cohort: Cohort_1_F
Database position: 1 (gen), 2 (sex), 1 (first), 4096 (last).
Derive genomic values of founders. 
Start deriving enviromental variance (according to given heritability).
Start simulating phenotypes.
Start simulating phenotypes.
==84673== Warning: set address range perms: large range [0xd1c00040, 0xe1c00070) (undefined)
rrBLUP
miraculix useGPU=F
base R
miraculix useGPU=T
[1] TRUE
[1] "bis hierhin läuft R"
==84673== Warning: set address range perms: large range [0xe1c01040, 0xf1c01070) (undefined)
matrix_coding laeuft
1-bit working
==84673== Warning: set address range perms: large range [0xd1c00028, 0xe1c00088) (noaccess)
unitsPerIndiv 256
alignedMem 4194304
1-bit still inside createCodeVector working
1-bit still inside createCodeVector working
1-bit still inside createCodeVector working
1-bit still workingmatrix_coding laeuft
matrix_coding laeuft
coding1 laeuft
coding1 laeuft
Indivs 8192
unitsPerIndiv 256
BitsPerCode 1
==84673== Invalid write of size 4
==84673==    at 0x55902DCC: coding1(unsigned int*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, SEXPREC*, double*) (in /home/johannes/R/x86_64-pc-linux-gnu-library/4.1/miraculix/libs/miraculix.so)
==84673==    by 0x55909D36: matrix_coding (in /home/johannes/R/x86_64-pc-linux-gnu-library/4.1/miraculix/libs/miraculix.so)
==84673==    by 0x4946F6F: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x498B84B: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x496D567: Rf_eval (in /usr/lib/R/lib/libR.so)
==84673==    by 0x496C35F: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x496D2A8: Rf_applyClosure (in /usr/lib/R/lib/libR.so)
==84673==    by 0x4992D5C: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x496D567: Rf_eval (in /usr/lib/R/lib/libR.so)
==84673==    by 0x497459D: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x497F0C7: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x498B602: ??? (in /usr/lib/R/lib/libR.so)
==84673==  Address 0xb87c4070 is 0 bytes after a block of size 16,777,264 alloc'd
==84673==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==84673==    by 0x49D42E5: Rf_allocVector3 (in /usr/lib/R/lib/libR.so)
==84673==    by 0x55907563: CreateEmptyCodeVector(unsigned int, unsigned int, snpcoding) (in /home/johannes/R/x86_64-pc-linux-gnu-library/4.1/miraculix/libs/miraculix.so)
==84673==    by 0x5591E1E9: matrix_start_Intern(unsigned int, unsigned int, SEXPREC*) (mmagpu_1bit.cu:287)
==84673==    by 0x5591E247: matrix_start_mma1Bit(unsigned int, unsigned int, SEXPREC*) (mmagpu_1bit.cu:295)
==84673==    by 0x5590983D: createSNPmatrix(unsigned int, unsigned int, snpcoding) (in /home/johannes/R/x86_64-pc-linux-gnu-library/4.1/miraculix/libs/miraculix.so)
==84673==    by 0x55909CA8: matrix_coding (in /home/johannes/R/x86_64-pc-linux-gnu-library/4.1/miraculix/libs/miraculix.so)
==84673==    by 0x4946F6F: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x498B84B: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x496D567: Rf_eval (in /usr/lib/R/lib/libR.so)
==84673==    by 0x496C35F: ??? (in /usr/lib/R/lib/libR.so)
==84673==    by 0x496D2A8: Rf_applyClosure (in /usr/lib/R/lib/libR.so)
==84673== 
coding1 laeuft
matrix_coding laeuft
matrix_coding laeuft
==84673== Warning: set address range perms: large range [0xf1c02040, 0x111c02070) (undefined)
==84673== Warning: noted but unhandled ioctl 0x19 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x49 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x21 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x1b with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x44 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==84673== Warning: noted but unhandled ioctl 0x48 with no size/direction hints.
==84673==    This could cause spurious value errors to appear.
==84673==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
Using device NVIDIA GeForce RTX 2070 SUPER
IntsPerRow: 256
BytesPerRow: 1024
==84673== Invalid read of size 16
==84673==    at 0x55BF3730: ??? (in /usr/lib/libcuda.so.510.54)
==84673==    by 0x55CF2D7A: ??? (in /usr/lib/libcuda.so.510.54)
==84673==    by 0x55DD9704: ??? (in /usr/lib/libcuda.so.510.54)
==84673==    by 0x55B90312: ??? (in /usr/lib/libcuda.so.510.54)
==84673==    by 0x55B90AA3: ??? (in /usr/lib/libcuda.so.510.54)
==84673==    by 0x55B92B78: ??? (in /usr/lib/libcuda.so.510.54)
==84673==    by 0x55C0A46D: ??? (in /usr/lib/libcuda.so.510.54)
==84673==    by 0x55642698: ??? (in /opt/cuda/targets/x86_64-linux/lib/libcudart.so.11.6.55)
==84673==    by 0x55616E2C: ??? (in /opt/cuda/targets/x86_64-linux/lib/libcudart.so.11.6.55)
==84673==    by 0x55666FC4: cudaMemcpyAsync (in /opt/cuda/targets/x86_64-linux/lib/libcudart.so.11.6.55)
==84673==    by 0x5591EE88: gpuCrossprodIntern(unsigned int*, unsigned long, unsigned long, double*, unsigned long) [clone ._omp_fn.0] (mmagpu_1bit.cu:142)
==84673==    by 0x6A94C75: GOMP_parallel (parallel.c:178)
==84673==  Address 0xdd200010 is in a --- anonymous segment
==84673== 

 *** caught segfault ***
address 0xdd200010, cause 'invalid permissions'

Traceback:
 1: miraculix::relationshipMatrix(miraculix::genomicmatrix(Z), centered = TRUE,     normalized = TRUE)
 2: system.time({    G <- miraculix::relationshipMatrix(miraculix::genomicmatrix(Z),         centered = TRUE, normalized = TRUE)    rm(Z)    rm(population)    gc()    y_hat2 <- ifelse(n[i] < 30000, miraculix::solveRelMat(G,         ratio, y - mean(y), mean(y)), rgpu::cu_matmul(G, rgpu::solve_large(G +         ratio * diag(rep(1, n[i])), matrix(y - mean(y), ncol = 1))) +         mean(y))})
An irrecoverable exception occurred. R is aborting now ...
==84673== 
==84673== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==84673==    at 0x4DD434C: __pthread_kill_implementation (in /usr/lib/libc.so.6)
==84673==    by 0x4D874B7: raise (in /usr/lib/libc.so.6)
==84673==    by 0x4D8755F: ??? (in /usr/lib/libc.so.6)
==84673==    by 0x55BF372F: ??? (in /usr/lib/libcuda.so.510.54)
==84673== 
==84673== HEAP SUMMARY:
==84673==     in use at exit: 944,085,483 bytes in 77,152 blocks
==84673==   total heap usage: 219,168 allocs, 142,016 frees, 2,524,686,052 bytes allocated
==84673== 
==84673== LEAK SUMMARY:
==84673==    definitely lost: 0 bytes in 0 blocks
==84673==    indirectly lost: 0 bytes in 0 blocks
==84673==      possibly lost: 109,719 bytes in 2,035 blocks
==84673==    still reachable: 943,942,996 bytes in 75,113 blocks
==84673==                       of which reachable via heuristic:
==84673==                         stdstring          : 27,262 bytes in 606 blocks
==84673==                         newarray           : 4,264 bytes in 1 blocks
==84673==         suppressed: 32,768 bytes in 4 blocks
==84673== Rerun with --leak-check=full to see details of leaked memory
==84673== 
==84673== For lists of detected and suppressed errors, rerun with: -s
==84673== ERROR SUMMARY: 5 errors from 2 contexts (suppressed: 0 from 0)
zsh: segmentation fault (core dumped)  R -d valgrind -f benchmark_paper.R